---
highlight-style: github
logo: https://epiverse-trace.github.io/hexlogo.png
title: "Rabbit Holes"
subtitle: "faster CI/CD | reproducible environments | interactive quarto"
format:
  revealjs:
    navigation-mode: vertical
    # preview-links: true
    slide-number: true
    theme: dark
#    footer: <https://epiverse-trace.github.io>

engine: knitr
filters:
  - webr
---

# Faster CI/CD - docker in GH actions

## GH actions

::: panel-tabset
### speed

![](images/docker-speed-comp-1.png){.border width="600"}

### slow

![](images/docker-speed-comp-4.png){.border width="600"}

### slow

![](images/docker-speed-comp-5.png){.border width="600"}

### fast

![](images/docker-speed-comp-2.png){.border width="600"}

### fast

![](images/docker-speed-comp-3.png){.border width="600"}

:::

## Files {.smaller}

::: panel-tabset

### slow

```{.yaml code-line-numbers="29-32,37-40"}
name: render readme

on:
  workflow_dispatch:
  push:
    branches:
      - "docker"
    paths:
      - 'README.Rmd'
      - '.github/workflows/render_readme.yml'
      - '.github/workflows/render_readme_docker.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

jobs:
  render-readme:
    runs-on: ubuntu-latest
    env:
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout repos
        uses: actions/checkout@v4

      - name: Setup R
        uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true

      - name: Setup pandoc
        uses: r-lib/actions/setup-pandoc@v2

      - name: Install dependencies
        uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rmarkdown, local::.

      - name: Compile the readme
        run: |
          writeLines(
            knitr::knit_expand(
              "README.Rmd",
              packagename = read.dcf("DESCRIPTION", "Package"),
              institution = read.dcf("DESCRIPTION", "Config/Institution"),
              department = read.dcf("DESCRIPTION", "Config/Department"),
              department_url = read.dcf("DESCRIPTION", "Config/DepartmentURL"),
              recon = read.dcf("DESCRIPTION", "Config/Recon"),
              recon_description = read.dcf("DESCRIPTION", "Config/ReconDescription"),
              gh_repo = Sys.getenv("GITHUB_REPOSITORY")
            ),
            "README_expanded.Rmd"
          )
          rmarkdown::render(
            "README_expanded.Rmd",
            output_file = "README.md",
            output_dir = "."
          )
        shell: Rscript {0}

      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if ! git diff-index --quiet HEAD; then
            git add README.md
            # Also add README figures if they exist
            if [ -d man/figures ]
            then
              git add man/figures/
            fi
            git commit -m "Automatic readme update"
            git pull --rebase origin ${{ github.ref.name }}
            git push origin || echo "No changes to push"
          fi

```

### fast

```{.yaml code-line-numbers="17-20,48-50"}
name: render readme + docker

on:
  workflow_dispatch:
  push:
    branches:
      - "docker"
    paths:
      - 'README.Rmd'
      - '.github/workflows/render_readme.yml'
      - '.github/workflows/render_readme_docker.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  render-readme:
    runs-on: ubuntu-latest
    container: bahadzie/alpine-r:4.3.0
    steps:
      - name: Checkout repos
        uses: actions/checkout@v4

      - name: Compile the readme
        run: |
          writeLines(
            knitr::knit_expand(
              "README.Rmd",
              packagename = read.dcf("DESCRIPTION", "Package"),
              institution = read.dcf("DESCRIPTION", "Config/Institution"),
              department = read.dcf("DESCRIPTION", "Config/Department"),
              department_url = read.dcf("DESCRIPTION", "Config/DepartmentURL"),
              recon = read.dcf("DESCRIPTION", "Config/Recon"),
              recon_description = read.dcf("DESCRIPTION", "Config/ReconDescription"),
              gh_repo = Sys.getenv("GITHUB_REPOSITORY")
            ),
            "README_expanded.Rmd"
          )
          rmarkdown::render(
            "README_expanded.Rmd",
            output_file = "README.md",
            output_dir = "."
          )
        shell: Rscript {0}


  commit-readme:
    needs: render-readme
    runs-on: ubuntu-latest
    steps:
      - name: Commit files
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          if ! git diff-index --quiet HEAD; then
            git add README.md
            # Also add README figures if they exist
            if [ -d man/figures ]
            then
              git add man/figures/
            fi
            git commit -m "Automatic readme update"
            git pull --rebase origin ${{ github.ref.name }}
            git push origin || echo "No changes to push"
          fi
        shell: bash {0}
```

### container

```dockerfile
FROM alpine:3.18

# Install R 4.3.0, Pandoc, OS deps and pak package manager
RUN apk --no-cache add pandoc-cli git R R-dev g++ && \
    R -q -e 'install.packages("pak", repos = sprintf("https://r-lib.github.io/p/pak/stable/%s/%s/%s",  .Platform$pkgType,  R.Version()$os,  R.Version()$arch))'

# Needed for rcmdcheck, pkgdown
RUN apk --no-cache add linux-headers

# Needed for pkgdown
RUN apk --no-cache add libxml2-dev
RUN apk --no-cache add fontconfig-dev
RUN apk --no-cache add harfbuzz-dev
RUN apk --no-cache add fribidi-dev
RUN apk --no-cache add freetype-dev
RUN apk --no-cache add libpng-dev
RUN apk --no-cache add tiff-dev
RUN apk --no-cache add libjpeg-turbo-dev

RUN R -q -e 'pak::pak("any::rcmdcheck"); pak::cache_clean()'
RUN R -q -e 'pak::pak("any::covr"); pak::cache_clean()'
RUN R -q -e 'pak::pak("any::pkgdown"); pak::cache_clean()'
# Installed with pkgdown so no need to install explicitly
# RUN R -q -e 'pak::pak("any::rmarkdown"); pak::cache_clean()'

# Problematic because alpine doesn't have a libv8 port
# RUN R -q -e 'pak::pak("any::cffr"); pak::cache_clean()'
# RUN R -q -e 'pak::pak("any::V8"); pak::cache_clean()'
```

### build

```{.yaml code-line-numbers="4-5"}
name: Build Docker R image

on:
  workflow_dispatch:
  push:
    branches:
      - "main"

# To be able to cancel a job in progress if the workflow file is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Cache Docker Image
        id: cache
        uses: actions/cache@v3
        with:
          path: /tmp/image.tgz
          key: ${{ runner.os }}-dockerimage-1-{{ hashFiles('/tmp/image.tgz') }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64 # only one needed to run on GH
          file: ./Dockerfile
          cache-from: type=gha # for cacheing build layers between builds
          cache-to: type=gha,mode=max # for cacheing build layers between builds
          outputs: type=tar,dest=/tmp/image.tar # output a local file that can be cached
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/alpine-r:4.3.0

      - name: Zip image
        run: |
          cat /tmp/image.tar | gzip > /tmp/image.tgz
```
:::

# reproducible environments - Nix & R

## Nix

![over 100,000 packages](images/nix.png)



::: footer
Learn more: [Nix](https://nixos.org/)
:::


## Install Nix {.smaller}

macOS

`sh <(curl -L https://nixos.org/nix/install)`

:::{.fragment}
Linux

`sh <(curl -L https://nixos.org/nix/install) --daemon`
:::
:::{.fragment}

Windows (WSL2)

`sh <(curl -L https://nixos.org/nix/install) --daemon`
:::


::: footer
Learn more: [Nix Reference Manual - Multi User Installation](https://nixos.org/download/#nix-install-linux)
:::

## Install software {.smaller}

::: panel-tabset
### R

`nix-shell --packages R`

![](images/nix-r.png){.border width="600"}

### R + ggplot2

`nix-shell --packages 'rWrapper.override{packages = [ rPackages.ggplot2 ];}'`

![](images/r-ggplot.png){.border width="600"}

### OS R vs Nix R

![](images/r-versions.png){.border width="600"}

:::

## R >= 3.0.2 {.smaller}

![](images/r-versions-web.png){.border width="700"}

::: footer
Learn more: [Nix package versions](https://lazamar.co.uk/nix-versions/?channel=nixpkgs-unstable&package=R)
:::


## Older versions {.smaller}

::: panel-tabset
### R 3.6.3

::: {.r-fit-text}
`nix-shell -p R -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/4426104c8c900fbe048c33a0e6f68a006235ac50.tar.gz`
:::

![](images/r-oldest-working.png){.border width="600"}

### R 3.5.3

::: {.r-fit-text}
`nix-shell -p R -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/25b53f32236b308172673c958f570b5b488c7b73.tar.gz`
:::

![](images/r-3-5-3.png){.border width="600"}

:::{.notes}
- Fail due to arm based CPU. Probably works on Intel x86
- Can troubleshoot the build scripts if its really necessary
:::

### Epiverse support

::: {.columns}

::: {.column}


- R 4.4.1 (June, 2024)
- R 4.4.0 (April, 2024)

- R 4.3.3 (February, 2024)
- R 4.3.2 (October, 2023)
- R 4.3.1 (June, 2023)
- R 4.3.0 (April, 2023)

- R 4.2.3 (March, 2023)
- R 4.2.2 (October, 2022)
- R 4.2.1 (June, 2022)
- R 4.2.0 (April, 2022)

:::

::: {.column}

- R 4.1.3 (March, 2022)
- R 4.1.2 (November, 2021)
- R 4.1.1 (August, 2021)
- R 4.1.0 (May, 2021)

- R 4.0.5 (March, 2021)
- R 4.0.4 (February, 2021)
- R 4.0.3 (October, 2020)
- R 4.0.2 (June, 2020)
- R 4.0.1 (June, 2020)
- R 4.0.0 (April, 2020)

:::

<!-- end columns -->
:::

:::

## {rix} ![](https://b-rodrigues.r-universe.dev/badges/rix?scale=1&color=pink&style=round)

![](images/rix.png){.border width="900"}

::: footer
Learn more: [rix: Reproducible Environments with Nix](https://b-rodrigues.github.io/rix/index.html)
:::

## rix(...)

``` r
rix(
  r_ver = "latest",
  r_pkgs = NULL,
  system_pkgs = NULL,
  git_pkgs = NULL,
  local_r_pkgs = NULL,
  tex_pkgs = NULL,
  ide = c("other", "code", "radian", "rstudio", "rserver"),
  project_path = ".",
  overwrite = FALSE,
  print = FALSE,
  message_type = "simple",
  shell_hook = NULL
)
```

::: footer
Learn more: [?rix](https://b-rodrigues.github.io/rix/reference/rix.html)
:::


## Testing rix()

``` r
rix(r_ver = "4.0.0",
    r_pkgs = c("linelist", "cleanepi"),
    system_pkgs = NULL,
    git_pkgs = list(package_name = "finalsize",
                    repo_url = "https://github.com/epiverse-trace/finalsize",
                    branch_name = "main",
                    commit = "1d4b6b17886fa042c363af47cdad8c720117d3bc"),
    ide = "other",
    project_path = tempdir(),
    overwrite = TRUE)
```

<!-- # Quarto - interactive docs

## altdocs

## webR -->


# interactive quarto

## finalsize demo

[Interactive version](https://bahadzie.github.io/finalsize/README.html){preview-link="true" style="text-align: center"}

## howto {.smaller}

1. Open folder in CLI
1. Install quarto-webR extension using `quarto add coatless/quarto-webr`
1. Add the following lines to yaml frontmatter
```{.yaml code-line-numbers="7-10"}
---
# existing Rmd metadata
output: github_document
bibliography: vignettes/references.json
link-citations: true

format: html
engine: knitr
filters:
  - webr
---

```
1. rename README.Rmd to README.qmd
1. Change code blocks from  `{r, include = FALSE}` to `{webr-r}`
1. run `quarto render README.qmd`

## IDE

[WebR REPL](https://webr.r-wasm.org/latest/)

:::{.footer}
Learn more: [Demo workspace code](https://github.com/r-wasm/webr/blob/main/src/repl/App.tsx)
:::

## quarto tutorial examples

[Hands on Programming with R](https://jjallaire.github.io/hopr/){preview-link="true"}

[Time Series Analysis](https://vlyubchich.github.io/tsar/l01_regression.html){preview-link="true"}

[Data Science in a Box](https://datasciencebox.org/02-hello-world){preview-link="true"}

[STA 210: Regression Analysis](https://sta210-s22.github.io/website/){preview-link="true"}

